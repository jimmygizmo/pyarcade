
This commented code, which will now be cleaned up, here shows the larger picture of handling input and modifiying
direction and speed.

Shows the normalization of the direction. Show magnitude of the vector.

Shows efficient ways to manage INPUT-TO-MOTION.

* However, this no longer has the horizontal sprite-flipping code. (still here but commented out.)
TODO: Add the sprite-flipping back but it will need to be handled differently now.

============================================================================================================


    # #### ####   EVENT LOOP    #### ####
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        # if event.type == pygame.KEYDOWN:
        #     print(f"A key was depressed. Unknown if released or how long pressed.    KEY #: {event.key}    KEY unicode character: {event.unicode}")
        # if event.type == pygame.MOUSEMOTION:
        #     print(f"Mouse is moving.    Position: {event.pos}")
        #     (monsters[3]['rect'].centerx, monsters[3]['rect'].centery) = event.pos  # Just stick the fish at the mouse pos, for now.

        # Just stick the fish at the mouse pos, for now.      Now using pygame.mouse.get_pos()      (and not events)
        # (monsters[3]['rect'].centerx, monsters[3]['rect'].centery) = pygame.mouse.get_pos()  # Crude but works great.

        # print(f"Mouse buttons pressed: {pygame.mouse.get_pressed()}")  # Returns (bool, bool, bool) for the 3 buttons.

        # print(f"Mouse relative speed: {pygame.mouse.get_rel()}")

        # It's important to use the following list properly.
        keys = pygame.key.get_pressed()
        # print(f"Returns a HUGE list of all keys, bool values: pygame.key.get_pressed: {keys}")
        # This is how you are supposed to use this list, via the K_ constants (which hold the int index position of the key in this list)
        # if keys[pygame.K_ESCAPE]:
        #     print(f"ESCAPE key pressed. Exiting game. Buh bye!")
        #     running = False
        # if keys[pygame.K_LEFT] and monsters[3]['d'].x > 0:
        #     monsters[3]['d'].x = -1
        #     monsters[3]['surface'] = pygame.transform.flip(monsters[3]['surface'], True, False)
        # if keys[pygame.K_RIGHT] and monsters[3]['d'].x < 0:
        #     monsters[3]['d'].x = 1
        #     monsters[3]['surface'] = pygame.transform.flip(monsters[3]['surface'], True, False)
        # if keys[pygame.K_UP]:
        #     monsters[3]['d'].y = -1
        # if keys[pygame.K_DOWN]:
        #     monsters[3]['d'].y = 1

        # Another interesting alternate control method:
        monsters[3]['d'].x = int(keys[pygame.K_RIGHT]) - int(keys[pygame.K_LEFT])
        # To understand this, note that int(True) = 1 and int(False) = 0 and keys[] are bools. 1-0 = 1, 0-1 = -1. Bingo!
        # Now for the vertical direction
        monsters[3]['d'].y = int(keys[pygame.K_DOWN]) - int(keys[pygame.K_UP])

        # To illustrate the diagonal speed-differential we will fix next:
        print(f"Velocity magnitude = Linear speed forward: {(monsters[3]['d'] * monsters[3]['s']).magnitude()}")
        # NOTE: Just referencing Vector2.magnitude will not work. It is a method. Do: mag = Vector2.magnitude()

        # We must NORMALIZE the direction vector
        # TODO: The IF logic may not be correct for our code. Confirm with video tutorial at 1:49:41 approx.
        #     The if-else here stems from the idea that you cannot call normalize() when (x, y) = (0, 0).
        #     TODO: Confirm that initial premise, then look closer at the if-else logic. The way I chose to initialize
        #     direction may be different from the video and therefore might require different logic here for edge case.
        monsters[3]['d'] = monsters[3]['d'].normalize() if monsters[3]['d'] else monsters[3]['d']

        print(f"FIXED: Linear speed forward: {(monsters[3]['d'] * monsters[3]['s']).magnitude()}")
        # You can see it is fixed. The 40% speed boost when going diagonally no longer occurs. Cool.


