# resizer.py

import cv2
import numpy


def alphonic_resize(img_data: bytes, width: int, height: int) -> bytes:
    numpy_array = numpy.fromstring(img_data, dtype=numpy.uint8, sep='')  # Decode bytes as UInt8 thanks to numpy utility.
    img_numpy = cv2.imdecode(numpy_array, cv2.IMREAD_UNCHANGED)  # NOTE: Accidentally started with cv2.IMREAD_COLOR, and it gave us only the RGB. Only 3 channels not 4 and hence our index error later.
    print(f"alphonic_resize - after numpy.fromstring AND cv2.imdecode - original size: img_numpy.shape: {img_numpy.shape}")
    new_size = (width, height)

    # # Resize the rgb and alpha layers separately and with the optimal algorithm for each.
    rgb = cv2.resize(img_numpy[:,:,:3], new_size, interpolation=cv2.INTER_AREA)
    alpha = cv2.resize(img_numpy[:,:,3], new_size, interpolation=cv2.INTER_NEAREST)

    # # Merge the layers back together again.
    rgba = cv2.cvtColor(rgb, cv2.COLOR_RGB2RGBA)
    rgba[:, :, 3] = alpha

    # Using this temp file hack until I can more cleanly get the raw image (PNG file) bytes out of the cv2 image.
    cv2.imwrite('alphonic-resize-temp-png.png', rgba)
    with open('alphonic-resize-temp-png.png', 'rb') as fh:
        img_bytes_out: bytes = fh.read()


    out_numpy_array = numpy.fromstring(img_bytes_out, dtype=numpy.uint8, sep='')  # For debug logging only for now.
    out_img_numpy = cv2.imdecode(out_numpy_array, cv2.IMREAD_UNCHANGED)  # For debug logging only for now.
    print(f"alphonic_resize - after resize - returned size: out_img_numpy.shape: {out_img_numpy.shape}")
    return img_bytes_out

    # STATUS: This is returning a valid image. Alpha is transparent, but seems to have a known issue with the edges.
    #    Other folks attempting a similar solution had similar problems. This is still a great experiment.
    #    THIS IS AN IMPROVEMENT over the other options (except for the possible border problem - possible hard
    #    edge or black line around edges - most-liekly fixable. HOWEVER .. I cannot use this yet. I am having trouble
    #    on the other side, converting raw bytes into a pygame surface. pygame.image.frombytes/frombuffer are not
    #    working yet. The image looks valid and shape is correct, so I think the problem is NOT here in resizer.

##
#


# OpenCV Docs:
# https://pypi.org/project/opencv-python/

# Posting with suggestion to use Cv2 and different algorithms for the alpha channel vs the RGB channels:
# https://stackoverflow.com/questions/77517041/pygame-smoothscale-png-image-with-alpha-transparency-channels-black-edges

# NOTE: I'm on Windows using WSL/Ubuntu, Pyenv Virtualenv and PyCharm for my dev env.
#    I chose to install opencv-contrib-python for all the interesting extras over just opencv-python.


# Original snippet:
#
# import cv2
#
# path_in = "input.png"
# path_out = "output.png"
# img = cv2.imread(path_in, cv2.IMREAD_UNCHANGED)
# new_size = (640, 480)
#
# # Compute alpha and rgb separately
# rgb = cv2.resize(img[:,:,:3], new_size, interpolation=cv2.INTER_AREA)
# alpha = cv2.resize(img[:,:,3], new_size, interpolation=cv2.INTER_NEAREST)
#
# # Merge back alpha with rgb
# rgba = cv2.cvtColor(rgb, cv2.COLOR_RGB2RGBA)
# rgba[:, :, 3] = alpha
#
# # Save
# cv2.imwrite(path_out, rgba)

# RELEVANT INFO ABOUT USING NUMPY ARRAYS TO HOLD AND PROCESS IMAGE DATA AND HOW MANY LIBRARIES USE
# NUMPY ARRAYS AS A BASIC FORMAT IN THIS AREA. DATA-SCIENCE, MACHINE-LEARNING, ETC.
# https://scikit-image.org/skimage-tutorials/lectures/00_images_are_arrays.html

# Great articles on image processing with OpenCV and Numpy:
# https://note.nkmk.me/en/python-opencv-numpy-alpha-blend-mask/
# Also:
# https://note.nkmk.me/en/python-numpy-image-processing/

# Numpy Array Slicing:
# https://www.turing.com/kb/guide-to-numpy-array-slicing



##
#

