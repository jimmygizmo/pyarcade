Expanded on the below ideas (scroll down)  .. here in this more recent chunk of comments on these topics:

            else:
                raise Exception(f"FATAL: Invalid ephase_name \"{ephase_name}\". "
                        "Check values in ENVIRO_PHASES config.")
            # TODO: This could -almost- be raised as a KeyError. Later, if we implement OrderedDict, it literally would
            #     be a KeyError exception in the kind of processing I am envisioning.
            #     (Currently we use a custom list-of-tuples strategy, but OrderedDict would make sense. The processing
            #     code would be quite different of course and using a built-in KeyError, via a dict get() method
            #     would be central to that different processing.
            #
            # NOTE: Another good option for the type of exception here could be ValueError. It means the type is correct
            #     but the value is invalid. I have used these a lot in the past and they make sense, especially if you
            #     need to distinguish from some other cases you may be lumping together under the generic Exception().

        ephase_count -= 1  # Decrement the counter for the current phase.

Earlier comments on this:

-------------------------------------------------------------------------------------

    # ##################################################    INPUT    ###################################################
    # pygame.key    pygame.mouse


    # #### ####   EVENT LOOP    #### ####
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            print(f"A key was depressed. Unknown if released or how long pressed.    KEY #: {event.key}    KEY unicode character: {event.unicode}")
            if event.key == pygame.K_ESCAPE:
                print("WOW - YOU WIN A PRIZE BECAUSE YOU PRESSED THE ESCAPE KEY ! ! ! ! !")


    # ENVIRONMENT PHASE PROCESSING - Rotate enviro sequence. Modify monster behavior per their enviro-reaction profiles.
    if ephase is None:
        ephase = ENVIRO_PHASES[0]
        ephase_name = ephase[0]
        ephase_count = ephase[1]
        cut_ephase = ENVIRO_PHASES.popleft()
        ENVIRO_PHASES.append(cut_ephase)
    else:
        # APPLY THE EFFECTS HERE - MONSTERS CHANGE THEIR SPEEDS
        for monster in monsters:
            if ephase_name == 'peace':
                monster['s'] = monster['p']
            elif ephase_name == 'rogue':
                monster['s'] = monster['r']
            elif ephase_name == 'chaos':
                monster['s'] = monster['c']
            elif ephase_name == 'frozen':
                monster['s'] = monster['f']
            else:
                # print(f"FATAL: Invalid ephase_name \"{ephase_name}\". Check values in ENVIRO_PHASES config. Exiting.")
                # sys.exit(1)
                # Alternate handling of a fatal condition, by raising an Exception:
                raise Exception(f"FATAL: Invalid ephase_name \"{ephase_name}\". "
                        "Check values in ENVIRO_PHASES config.")
                # NOTE: Whether an exception MUST be fatal and how you specifically handle any kind of a sub-optimal
                # condition is totally up to you as the developer. Part of this is an issue of the "user experience"
                # and how you "communicate" with the user, as much as how you leverage the internal, Exception-
                # handling features of your language, frameworks and platforms.
                # The example you see here is not necessarily how I plan to handle this issue here in the final version.
                # This is just an example. Both the "raise Exception" method AND the "print and sys.exit(1)" methods
                # work great and they can work together in generalize exception-handling you may design into your
                # application. Exception-handling in Python is a whole discipline unto itself and worth much study.

        ephase_count -= 1  # Decrement the counter for the current phase.
        if ephase_count < 1:
            ephase = None


    # ##################################################    DRAW    ####################################################
